export PATH="$(pwd):$PATH"
export AWS_REGION="us-east-1"

alias cdt="cd ~/dev/temp"
alias cdh="cd ~/dev/home"
export WORK_DIR=~/dev/work
export WORK_DIR2=~/dev/2work2
alias cdw="cd $WORK_DIR"
alias {cdw2,cd2}="cd ~/dev/2work2"
alias {cde,cdenv,cdenv0}="cd ~/dev/work/env0"
alias pnpn="pnpm"
alias got="git"
alias extract="tar -xvf *"
eval `ls $WORK_DIR | sed -r "s|(.*)|alias web\1=\"web $WORK_DIR/\1\"|"`
eval `ls $WORK_DIR | sed -r "s|(.*)|alias code\1=\"code $WORK_DIR/\1\"|"`
eval `ls $WORK_DIR | sed -r "s|(.*)|alias cd\1=\"cd $WORK_DIR/\1\"|"`
eval `ls $WORK_DIR2 | sed -r "s|(.*)|alias web2\1=\"web $WORK_DIR2/\1\"|"`
eval `ls $WORK_DIR2 | sed -r "s|(.*)|alias code2\1=\"code $WORK_DIR2/\1\"|"`
eval `ls $WORK_DIR2 | sed -r "s|(.*)|alias cd2\1=\"cd $WORK_DIR2/\1\"|"`
alias cdterra="/Users/liron/dev/temp/terra/"
alias wip="git status; git add .;git commit -m \"wip\" && git push; git rev-parse HEAD; git rev-parse HEAD | pbcopy"
alias {wipf,wipv,wipnv}="git status; git add .;git commit -m \"wip\" --no-verify && git push; echo "commit:" ; git rev-parse HEAD; git rev-parse HEAD | pbcopy"
alias {emptycommit,gitempty,gempty}="git commit --allow-empty -m \"Empty commit\" && git push"
alias {crfix,crFix,fixCR,fixcr,fixpr}="git add . && git commit -m \" fix code according to CR comments\" && git push ; echo "commit:" ; git rev-parse HEAD; git rev-parse HEAD | pbcopy"
alias {prnumber,prnum}="gh pr view --json number --jq  '.number' | cat"
alias seedpr="open \"https://console.seed.run/env0/Services/activity/stages/pr\$(prnum)\""
alias sseed="gh pr checks | grep -i seed; echo \"pr number: \$(prnumber)\""
alias bors="gh pr checks | grep bors; open \$(gh pr checks | grep bors | grep -Eo \"(http|https)://[a-zA-Z0-9./?#=_%:-]*\")"
alias {borss,borsStatus,borsstatus,sbors,statusBors}="gh pr checks | grep bors; echo \"pr number: \$(prnumber)\""
alias {mbors,mergebors,mergeBors,borsmerge,borsMerge}="gh pr comment \$(prnumber) -b \"bors merge\""
alias {retrybors,retrymergebors,retryMergeBors,retryborsmerge,retryBorsMerge}="gh pr comment \$(prnumber) -b \"bors merge\""
alias {env0pr,prenv0}="open \"http://pr\$(prnumber).dev.env0.com\""
#alias {env0local,localenv0,local}="open \"http://localhost:3000\""
alias {env0dev,devenv0}="open \"http://dev.dev.env0.com\""
alias trelloSearch="open \"https://trello.com/b/z7X8PcF6/env0-rnd?filter=$1,member:lironsabo3\""
alias ghpr="gh pr view --web"
alias liron-dev="source /Users/liron/scripts/envs/liron-dev"
alias {gitbranches,gitb}="/Users/liron/scripts/git-branches.sh"
alias gs="git status"
alias squash=" git reset \$(git merge-base master \$(git rev-parse --abbrev-ref HEAD))"


function colorFail() { 
   echo "$1" | sed -E -e 's,FAILED|fail,\x1b[31m&\x1b[0m,gI' 
}

function colorSuccess() { 
   echo "$1" | sed -E -e 's,pass|passed|success,\x1b[32m&\x1b[0m,gI' 
}
 
colorResult() {
    colorFail $(colorSuccess $1)
    # echo "$1" | colorFail | colorSuccess
}

errorMessage() {
		echo
		echo "-----------------------------------------------------------------------"
		echo "\033[0;31m $1\033[0m"
		echo "-----------------------------------------------------------------------"
		echo
}

#Task
taskstart(){
	if [ -n "$(git status --porcelain)" ]; then
		errorMessage "Please clean changed files before switching to a new branch."
		git status
	elif [ ! -f ".github/pull_request_template.md" ]; then
		errorMessage "Please be in the right folder.\n Missing: .github/pull_request_template.md."
		pwd
	else
		# BRANCH_NAME=$(echo "$1" | sed 's/://g' | sed 's/ /-/g' | sed -e 's/\([A-Z]\)/-\1/g' -e 's/^-//' | tr '[:upper:]' '[:lower:]')
		BRANCH_NAME=$(echo "$1" | sed 's/://g' | sed 's/ /-/g' | tr '[:upper:]' '[:lower:]')
		git checkout ${2:-"master"}
		git pull
		git checkout -b "$BRANCH_NAME"
		echo "Branch is $BRANCH_NAME"
		git push --set-upstream origin "$BRANCH_NAME"
		emptycommit
		TITLE=$(echo "$1" | sed 's|-| |g')
		gh pr create --title="$TITLE" --body-file=".github/pull_request_template.md" --label="work in progress"
		prnumber | pbcopy
	fi
}

alias starttask="taskstart"
# Github
gh-open(){
  open $(git config remote.origin.url | sed "s/git@\(.*\):\(.*\).git/https:\/\/\1\/\2/")/$1$2
}
alias {ghm,github}='gh-open'

# Open current branch
alias ghb='gh-open tree/$(git symbolic-ref --quiet --short HEAD )'

# Open current directory/file in current branch
alias ghbf="gh-open tree/\$(git symbolic-ref --quiet --short HEAD )/\$(git rev-parse --show-prefix)"

# Open current directory/file in master branch
alias ghf='gh-open tree/master/\$(git rev-parse --show-prefix)'



pfr() {
  KEY=$(cat ~/.trello-cli/config.json | jq .appKey)
  TOKEN=$(cat ~/.trello-cli/authentication.json | jq .token)
  IN_REVIEW_LANE="5d0534264cfe5055fea7ff01"
  PR_NUM=$(gh pr view --json number --jq  '.number' | cat)
  
  MY_TICKETS=$(curl -s --request GET \
        --url "https://api.trello.com/1/members/eran_elbaz/cards?key=${KEY}&token=${TOKEN}" \
        --header 'Accept: application/json' | jq -c '.[] | select( .idBoard == "5c7bd9b0f3f00174ac28c2df")' | jq -r .shortLink)
  
  for id in $MY_TICKETS; do
  {
    CARD_ATTACHMENTS=$(curl -s --request GET \
           --url "https://api.trello.com/1/cards/${id}/attachments?key=${KEY}&token=${TOKEN}" \
           --header 'Accept: application/json' | jq -c '.[] | select( .url == "https://github.com/env0/env0/pull/'$PR_NUM'")')
    if [ ! -z "$CARD_ATTACHMENTS" ]
    then
       curl -s -o /dev/null --request PUT \
         --url "https://api.trello.com/1/cards/${id}?key=${KEY}&token=${TOKEN}&idList=${IN_REVIEW_LANE}" \
         --header 'Accept: application/json'
       echo "https://trello.com/c/${id}/"
    fi
  }
  done
  gh pr edit --add-label "pending final review" --add-reviewer env0/pr-reviewers --remove-label "work in progress"
}


