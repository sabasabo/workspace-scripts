export PATH="$(pwd):$PATH"
alias saboo="temp.sh 'lir lir'"

alias cdt="cd ~/dev/temp"
alias cdh="cd ~/dev/home"
export WORK_DIR=~/dev/work
alias cdw="cd $WORK_DIR"
alias cdw2="cd ~/dev/2work2"
alias {cde,cdenv,cdenv0}="cd ~/dev/work/env0"
alias pnpn="pnpm"
alias got="git"
alias extract="tar -xvf *"
eval `ls $WORK_DIR | sed -r "s|(.*)|alias web\1=\"web $WORK_DIR/\1\"|"`
eval `ls $WORK_DIR | sed -r "s|(.*)|alias code\1=\"code $WORK_DIR/\1\"|"`
eval `ls $WORK_DIR | sed -r "s|(.*)|alias cd\1=\"cd $WORK_DIR/\1\"|"`
alias cdterra="/Users/liron/dev/temp/terra/"

alias wip="git status; git add .;git commit -m \"wip\" && git push; git rev-parse HEAD; git rev-parse HEAD | pbcopy"
alias {wipf,wipv,wipnv}="git status; git add .;git commit -m \"wip\" --no-verify && git push; echo "commit:" ; git rev-parse HEAD; git rev-parse HEAD | pbcopy"
alias {emptycommit,gitempty,gempty}="git commit --allow-empty -m \"Empty commit\" && git push"
alias {crfix,crFix,fixCR,fixcr,fixpr}="git add . && git commit -m \" fix code according to CR comments\"} && git push ; echo "commit:" ; git rev-parse HEAD; git rev-parse HEAD | pbcopy"
alias {prnumber,prnum}="gh pr view --json number --jq  '.number' | cat"
alias seedpr="open \"https://console.seed.run/env0/Services/activity/stages/pr\$(prnum)\""
alias bors="gh pr checks | grep bors; open \$(gh pr checks | grep bors | grep -Eo \"(http|https)://[a-zA-Z0-9./?#=_%:-]*\")"
alias {borss,borsStatus,borsstatus,sbors,statusBors}="gh pr checks | grep bors; echo \"pr number: \$(prnumber)\""
alias {mbors,mergebors,mergeBors,borsmerge,borsMerge}="emptycommit; gh pr comment -b \"bors merge\""
alias {env0pr,prenv0}="open \"http://pr\$(prnumber).dev.env0.com\""
#alias {env0local,localenv0,local}="open \"http://localhost:3000\""
alias {env0dev,devenv0}="open \"http://dev.dev.env0.com\""
alias trelloSearch="open \"https://trello.com/b/z7X8PcF6/env0-rnd?filter=$1,member:lironsabo3\""
alias ghpr="gh pr view --web"
alias liron-dev="source /Users/liron/scripts/envs/liron-dev"
alias {gitbranches,gitb}="/Users/liron/scripts/git-branches.sh"
alias gs="git status"
alias squash=" git reset \$(git merge-base master \$(git rev-parse --abbrev-ref HEAD))"

errorMessage() {
		echo
		echo "-----------------------------------------------------------------------"
		echo "\033[0;31m $1\033[0m"
		echo "-----------------------------------------------------------------------"
		echo
}

#Task
taskstart(){
	if [ -n "$(git status --porcelain)" ]; then
		errorMessage "Please clean changed files before switching to a new branch."
		git status
	elif [ ! -f ".github/pull_request_template.md" ]; then
		errorMessage "Please be in the right folder.\n Missing: .github/pull_request_template.md."
		pwd
	else
		# BRANCH_NAME=$(echo "$1" | sed 's/://g' | sed 's/ /-/g' | sed -e 's/\([A-Z]\)/-\1/g' -e 's/^-//' | tr '[:upper:]' '[:lower:]')
		BRANCH_NAME=$(echo "$1" | sed 's/://g' | sed 's/ /-/g' | tr '[:upper:]' '[:lower:]')
		git checkout ${2:-"master"}
		git pull
		git checkout -b "$BRANCH_NAME"
		echo "Branch is $BRANCH_NAME"
		git push --set-upstream origin "$BRANCH_NAME"
		emptycommit
		TITLE=$(echo "$1" | sed 's|-| |g')
		gh pr create --title="$TITLE" --body-file=".github/pull_request_template.md" --label="work in progress"
		prnumber | pbcopy
	fi
}

alias starttask="taskstart"
# Github
gh-open(){
  open $(git config remote.origin.url | sed "s/git@\(.*\):\(.*\).git/https:\/\/\1\/\2/")/$1$2
}
alias {ghm,github}='gh-open'

# Open current branch
alias ghb='gh-open tree/$(git symbolic-ref --quiet --short HEAD )'

# Open current directory/file in current branch
alias ghbf="gh-open tree/\$(git symbolic-ref --quiet --short HEAD )/\$(git rev-parse --show-prefix)"

# Open current directory/file in master branch
alias ghf='gh-open tree/master/\$(git rev-parse --show-prefix)'

